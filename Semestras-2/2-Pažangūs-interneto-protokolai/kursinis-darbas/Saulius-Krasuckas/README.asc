[.text-center]
==== Vilniaus Gedimino technikos universitetas
[.text-center]
==== Kompiuterijos ir ryšių inžinerijos katedra
[.text-center]
== Pažangūs interneto protokolai. Kursinio projekto užduotis

==== Individuali užduotis Nr.: 7

|===
 | |

 | Studentui:
 | Sauliui Krasuckui

 | Pavadinimas:
 | TCP HighSpeed, TCP BIC protokolų palyginimas

 | Tinklo schema:  
a|image::https://user-images.githubusercontent.com/74717106/120938576-0a415e80-c71c-11eb-8b1e-c475b7594667.png[]

 | Duomenys:
 | 
TCP protokolai: TCP HighSpeed, TCP BIC +
Siųstuvų skaičius: 1 – 5 +
Imtuvų skaičius: 1 +
Visų kanalų sparta: 100 Mb/s +
Tiriamos linijos kanalo paketų praradimas: 0 %, 4 %, 6 % +
Tiriamos linijos kanalo vėlinimas: 2 ms, 6 ms, 80 ms +
Srauto generatorius: ftp +
Modeliavimo trukmė: nemažiau 5 min +

 | Ataskaitoje pateikiami grafikai:
a|
4. Abiejų TCP protokolų vidutinio pralaidumo priklausomybė 2D
grafikų forma nuo:
a. šaltinių skaičiaus, kai kiti parametrai yra minimalūs;
b. tiriamos linijos paketų praradimo, kai šaltinių skaičius 5, o
kiti parametrai minimalūs;
c. kanalo vėlinimo, kai šaltinių skaičius 5, o kiti parametrai
minimalūs;

5. Pasirinkto TCP šaltinio abiejų TCP protokolų grūsties lango (angl.
Congestion Window) kitimo priklausomybė laike:
a. kinta šaltinių skaičiaus, o tiriamos linijos parametrai
minimalūs;
b. kinta tiriamos linijos paketų praradimai, šaltinių skaičiaus
maksimalus, o kiti parametrai minimalūs;
c. kinta tiriamos linijos paketų vėlinimas, šaltinių skaičiaus
maksimalus, o kiti parametrai minimalūs;

6. Abiejų TCP protokolų pralaidumo kitimo laike grafikai, esant
ribinėms sąlygoms (kai visi parametrai minimalūs ir kai
maksimalūs) (vienas grafikas)

 | Rašto darbo turinys: 
 | 
1. Įvadas, +
2. Teorinis protokolų palyginimas, +
3. Modeliavimo algoritmas, +
4. Modeliavimo rezultatai, +
5. Išvados
|===

<<<
---

[.text-left]
=== 1. Įvadas

Modeliuosime tinklą `NS-2` įrankio pagalba.

=== 2. Teorinis TCP protokolo valdymo algoritmų palyginimas

1. https://en.wikipedia.org/wiki/HSTCP[*TCP HighSpeed* algoritmas] +
   {nbsp} +
   Dar vadinamas HSTCP. Aprašytas https://datatracker.ietf.org/doc/html/rfc3649#section-1[RFC 3649].
   Skirtas TCP pralaidai maksimizuoti LFN tinkluose (angl. _Long fat network_): ten, kur pralaidos ir vėlinimo sandaugos vertė yra didelė.
   Tam jis (HSTCP) minimaliai papildo standartinį TCP grūsties valdymo algoritmą: 
   * _Slow Start_ fazė lieka tokia pati;
   * _Congestion Avoidance_ fazė daloma į dvi dalis:
   ** Kol CWND dydis *neviršija tam tikros ribos*, HSTCP dar atitinka klasikinį TCP:
   *** langas su kiekvienu ACK padidinimas įprastai, po `1/CWND * MSS`,
   *** o aptikus praradimą langas nukrenta iki `0.5 * CWND`.
   ** Kai CWND dydis *ją viršija*, didinimo daugiklis ir nukritimo vertė tampa CWND funkcijomis:
   *** `a(CWND)/CWND * MSS`
   *** `(1 - b(CWND)) * CWND`
   *** Jos tokios, kad HSTCP *CWND ir užauga, ir nukrenta greičiau* nei klasikiniame TCP.
   {nbsp}

2. https://en.wikipedia.org/wiki/BIC_TCP[*TCP BIC* algoritmas] +
   {nbsp} +
   Išsišifruoja angl. kaip _Binary Increase Congestion control_.
   Irgi skirtas stipriam TCP pralaidos padidinimui LFN tinkluose.
   Tai jau yra unikalus algoritmas, kuris:
   * CWND didinimui pasirenka vieną iš trijų būdų:
     . dvejatainę paieška (bisekciją);
     . adityvinį didinimą (grubiai sumavimą);
     . _Slow_ startą.
   * Tam algoritmas rezervuojasi ir tikrina tris kintamuosius: `S_max`, `S_min`, `w_max`.
   Tai yra, pagal juos apskaičiuoja `a(CWND)` reikšmę.
   * CWND mažinimui (aptikus bent vieną praradimą) naudoja tik:
     . multiplikatyvinį mažinimą (grubiai dalybą),
   * Tam algoritmas rezervuojasi ir panaudoja dar vieną kintamąjį `β`.
   * Jei apdoroja du srautus su stipriai besiskiriančiais CWND, pakeičia dalinimo koeficientus (įjungia _Fast Convergence_).
   Tai yra, pagal `β`, pastarąją sąlygą ir `w_max` jis pasirenka `b(CWND)` reikšmę bei pakoreguoja patį `w_max`.


=== 3. Modeliavimo eiga

1. Įrankių pasiruošimas:
   * Pasirinkau savo Linux OS distribuciją: `CentOS 7.9.2009`. Deja, `NS-2` paketų jai neradau.
   * Ieškojau alternatyvių `.rpm` paketų su `NS-2`. Deja, visi rastieji tinka tik Fedora distribucijai ir savaime naujesniam `Glibc`.
   * Ieškojau alternatyvių `.spec` failų `NS-2` paketams kompiliuotis. Radau keletą (Fedora, OpenSuSE).
   * Mokinausi kompiliuoti `.rpm` paketus iš `.spec` failų.
   * Juos taisiau ir galiausiai susikompiliavau reikiamus keturis paketus, tinkančius `CentOS 7`: +
     https://github.com/VGTU-ELF/TETfm-20/tree/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/tools/NS-2/On-EL7.9.md[../tools/NS-2/On-EL7.9.md]
    
2. Susipažinimas su pateiktais skriptais:
   * leidau NS-2 simuliacijos skriptą `simple.tcl`,
   * analizavau jo išvestį ir kodą,
   * tyrinėjau Trace failų formatus,
   * ieškojau įvado į NS-2 sintaksę, mokinausi jos: +
   http://nile.wpi.edu/NS/simple_ns.html
   * sugeneruotą Trace failą apdorojau kitu pateiktu įrankiu `Throughput.awk`.
   
3. Simuliacijos skripto perrašymas Reverse-engineering būdu:
   * perpratau sintaksę ir skriptinimo stilių,
   * perrašiau `simple.tcl` veiksmus nuo nulio savu stiliumi:
   ** naudojau kitus kitamųjų vardus (daug sistematiškesnius, mano nuomone);
   ** kai kur pridėjau papildomų komentarų;
   ** įjungiau papildomą Tace failą `trace-all` formatu (`nametrace-all` nepakako).

4. Skripto `kursinis-saukrs.tcl` taisymas pagal pateiktą užduotį ir duotus pavyzdžius:
   * antrojo TCP šaltinio pridėjimas;
   * UDP šaltinio ir imtuvo išmetimas;
   * antrojo maršruto parinktyvo pridėjimas;
   * praradimų mechanizmo įtraukimas;
   * svarbių konstantų agregavimas į skripto kintamuosius;
   * vėlinimo ir paradimo parametrų nuskaitymas iš komandinės eilutės;
   * duotųjų TCP grūsties valdymo algoritmų (HSTCP ir BIC) priskyrimas abiems TCP srauto siuntėjams;
   * patikrinimas, ar tiriamojoje linijoje dažnai pasiekiami 100 Mbps – ne, yra kažkokių kliūčių;
   * teorinė priežasčių analizė ir praktinė parametrų paieška literatūroje bei keitimai skripte:
   ** kanalo buferių Queue Size;
   ** maks. Congestion Window dydžio;
   ** MSS;
   * MSS padidinimas nuo `1000 B` iki `1448 B` ir priartėjimas prie 100 Mbps tiriamojoje linijoje.

5. Skripto `kursinis-saukrs-run.sh` kūrimas simuliacijų valdymui ir diagramų braižymui:
   * pradėjimas nuo `ns` komandos perkopijavimo iš terminalo;
   * struktūros auginimas, valdymo automatizavimas mažinant rankinio darbo poreikį ir siekiant išvengti pasikartojimų ir konstantų `Hardcoding`;
   * `ns` paleidimo cikle ir per pasikartojančias komandines eilutes palyginimas;
   * CLI-integravimas su `kursinis-saukrs.tcl` skriptu, kuriam perduodu:
   ** vėlinimus,
   ** paketų praradimus,
   ** Trace-failo vardą,
   ** tvarkaraščio seką;
   * `Throughput.awk` failo taisymas, pritaikymas vidutinei viso modeliavimo spartai skaičiuoti bei išvesti į `STDERR`;
   * Gnuplot pasirinkimas, diegimas, pramokimas;
   * Gnuplot skripto kūrimas ir optimizavimas (kad vieno skripto pakaktų bet kuriai pralaidumo diagramai braižyti);
   * Gnuplot skriptui per CLI perduodama:
   ** lentelių failų vardai
   ** kreivių pavadinimai
   ** bendras diagramos pavadinimas
   * Trijų užduočių modeliavimas ir rezultatų braižymas diagramų pavidalu:
   ** 1. Pralaidumas linijoje naudojant tik HSTCP, tik BIC ir abu algoritmus kartu, kai kiti parametrai mininimalūs;
   ** 2. Pralaidumas linijoje esant skirtingiems vėlininimams, kai paketų praradimai linijoje = 0%;
   ** 3. Pralaidumas linijoje esant skirtingiems paketų praradimams, kai vėlinimas = 2 ms;
   * Prastos atskirai veikiančio BIC algoritmo pasiekiamos spartos pastebėjimas ir priežasčių paieška;
   * Ryšio su `CWND_MAX` pastebėjimas ir šio sumažinimas nuo `256000` iki `20`;
   * Visų trijų diagramų perbraižymas.

=== 4. Modeliavimo rezultatai

.Naudoti failai:
|===
 | Paskirtis | Tipas | Pavadinimas

 | Pagrindinė programa
 | _Bash_ skriptas
 | https://github.com/VGTU-ELF/TETfm-20/blob/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/kursinis-saukrs-run.sh[`kursinis-saukrs-run.sh`]

 | NS-2 simuliatoriaus valdymui
 | _TCL_ skriptas
 | https://github.com/VGTU-ELF/TETfm-20/blob/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/kursinis-saukrs.tcl[`kursinis-saukrs.tcl`]

 | Diagramų braižymui
 | _gnuplot_ skriptas 
 | https://github.com/VGTU-ELF/TETfm-20/blob/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/kursinis-saukrs-throughput-by-delay.p[`kursinis-saukrs-throughput-by-delay.p`]

 | Pralaidumo skaičiuoklė
 | _AWK_ skriptas
 | https://github.com/VGTU-ELF/TETfm-20/blob/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/tools/NS-2/Throughput.awk[`../tools/NS-2/Throughput.awk`]

 | Modeliavimo eigos stebėjimui
 | Tekstinis logas
a| * https://github.com/VGTU-ELF/TETfm-20/blob/04ae3cec2a6f68746a872ba583eabfe88ab4ef4b/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/output/kursinis-saukrs.log[`output/kursinis-saukrs.log`] kai `CWND_MAX = 20`

* https://github.com/VGTU-ELF/TETfm-20/blob/04ae3cec2a6f68746a872ba583eabfe88ab4ef4b/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/output/kursinis-saukrs.log[`output/kursinis-saukrs.log`] kai `CWND_MAX = 256,000`

* `output/kursinis-saukrs.log` https://github.com/VGTU-ELF/TETfm-20/commit/04ae3cec2a6f68746a872ba583eabfe88ab4ef4b#diff-0cacf6125583d3a5fba58a24ac39b6502fef1358dd7128a43ab7bbba3df55499[versijų skirtumas]
|===

.Ištirto pralaidumo diagramų palyginimas:
|===
 | `CWND_MAX = 20` | `CWND_MAX = 256,000`

a|image::https://raw.githubusercontent.com/VGTU-ELF/TETfm-20/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/output/kursinis-saukrs-04-pralaidumas-CWND_MAX%3D20-skirtingiems-Cg-algoritmams.2ms%2B0%25.png[]
a|image::https://raw.githubusercontent.com/VGTU-ELF/TETfm-20/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/output/kursinis-saukrs-01-pralaidumas-CWND_MAX%3D256000-skirtingiems-Cg-algoritmams.2ms%2B0%25.png[]

a|image::https://raw.githubusercontent.com/VGTU-ELF/TETfm-20/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/output/kursinis-saukrs-06-pralaidumas-CWND_MAX%3D20-skirtingiems-praradimams.2ms.png[]
a|image::https://raw.githubusercontent.com/VGTU-ELF/TETfm-20/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/output/kursinis-saukrs-03-pralaidumas-CWND_MAX%3D256000-skirtingiems-praradimams.2ms.png[]

a|image::https://raw.githubusercontent.com/VGTU-ELF/TETfm-20/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/output/kursinis-saukrs-05-pralaidumas-CWND_MAX%3D20-skirtingiems-v%C4%97linimams.0%25.png[]
a|image::https://raw.githubusercontent.com/VGTU-ELF/TETfm-20/main/Semestras-2/2-Pa%C5%BEang%C5%ABs-interneto-protokolai/kursinis-darbas/Saulius-Krasuckas/output/kursinis-saukrs-02-pralaidumas-CWND_MAX%3D256000-skirtingiems-v%C4%97linimams.0%25.png[]

|===

=== 5. Išvados

* Pagal pavyzdį internete rastas ir simuliatoriuje pasirinktas `CWND_MAX = 256000` nustatymas įnešta tam tikrų anomalijų ir srauto nestabilumų lyginant su `CWND_MAX = 20`.

* Nors užduotis nereikalauja, buvo atliktas modeliuojamų srautų palyginimas su `CWND_MAX = 20`.

* Kai `CWND_MAX = 20`, paketų praradimai = 0%, o vėlinimas = 2 ms:
** pavieniai tiek `BIC`, tiek `HSTCP` srautai teužauga iki **28,45 Mbps** esant kitiems parametrams minimaliems;
** kartu veikdami jie savo srautus praktiškai susumuoja: **56,84 Mbps**. Nors ir atsiranda tam tikras, < 1 Mbps bendro srauto šokinėjimas
** linijos vėlinimo didinimas 2..6..80 ms srautą numuša stipriai: **56**..**29**..**3 Mbps**;
** paketų praradimų linijoje didinimas 1..4..6% srautą numuša dar stipriau: **9**..**2,6**..**1,7 Mbps**;
** taip pat atsiranda bendro srauto nestabilumas, pvz. esant 1% praradimams srautas šokinėja +/– 3..19 Mbps .

* Kai `CWND_MAX = 256000`:
** pavienio `BIC` spūsčių/grūsčių valdymo algoritmo srautas krinta iki **~16 Mbps**;
** o pavienio `HSTCP` algoritmo srautas pakyla iki **~53 Mbps**,
** tačiau kartu veikdami jie sukuria jau šokinėjantį **45 Mbps** srautą;
** linijos vėlinimo didinimas iki 6 ms srautą netikėtai kilsteli iki **63 Mbps** (!),
** tačiau priverčia jį dar labiau šokinėti;
** 80 ms vėlinimas srautą numuša iki **31 Mbps**,
** o stabilumas išvis sumažėja –– jo kitimas laike tampa pjūklo formos, su 30–40 s periodu;
** didinant paketų praradimus iš srauto kitimas nebelabai priklauso nuo `CWND_MAX` ir iš esmės atitinka `CWND_MAX = 20` vertę.

* Pagrįsta būtų tęsti tyrimą ir ieškoti priimtinesnės – ir daugiau linijos pralaidumo sukuriančios, ir vis dar stabilumą užtikrinančios `CWND_MAX` vertės.

* `Thoughput.awk` failo vidurkinimo žingsnis, lygus `0,1 s` yra gerokai per mažas, kai diagramas braižome nenusistovėjusiam (nestabiliam) srautui.
  Tokį srautą `1 s` žingsnis diagramose suintegruoja gan priimtinai akiai.

* Yra galimybė valdyti `NS-2` simuliatorių vien su TCL kalba, tačiau simuliacijų automatizavimui (duomenų išsifiltravimui su AWK, taip pat perdavimui į Gnuplot) pasirinkau man įprastą _Bash_ skriptinimo kalbą.

* Galutinis sprendimas veikia taip:
** 1, pataisome simuliavimo parametrus `.sh` faile;
** 2, jį startuojame;
** 3, jis paleidžiama reikiamas simuliatoriaus sesijas, sugeneruoja skirtingus linijos pralaidumo failus bei pagal juos braižo diagramas;
** 4, šios diagramos atveriamos `CentOS 7` įprastame `Gnome 3` darbalaukyje (komanda `gio open`);
** 5, sugeneruotieji failai saugomi `output/` direktorijoje.
